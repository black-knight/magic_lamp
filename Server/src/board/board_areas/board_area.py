import cv2
from random import randint
from server import globals


class BoardArea(object):
    """
    Represents a description of a board area.

    Field variables:
    board_area_pct -- [x1, y1, x2, y2] in percentage [0..1]
    board_descriptor -- Board descriptor
    area_image -- Extracted area image
    """
    extracted_area_image = None
    extracted_grayscaled_area_image = None

    def __init__(self, area_id=None, board_area_pct=[0.0, 0.0, 1.0, 1.0], board_descriptor=None):
        """
        Initializes a tiled board area.

        :param area_id: Area id. Autogenerated if None.
        :param board_area_pct: Board area in percentage of board [x1, y1, x2, y2]
        :param board_descriptor: Board descriptor. If None, global board descriptor is used.
        """
        self.area_id = area_id if area_id is not None else randint(0, 100000)
        self.board_area_pct = board_area_pct
        self.board_descriptor = board_descriptor if board_descriptor is not None else globals.board_descriptor

    def reset_area_image(self):
        """
        Resets the area image to force extraction of new image on next request.
        """
        self.extracted_area_image = None

    def area_image(self, reuse=False):
        """
        Extracts area image from board snapshot.

        :param reuse: If True, reuse current snapshot, or else force extract new.
        :return Extracted area image
        """

        # Check if board is recognized
        if not self.board_descriptor.is_recognized():
            self.extracted_area_image = None
            return None

        # Already extracted image
        if reuse and self.extracted_area_image is not None:
            return self.extracted_area_image

        # Get board canvas image
        board_image = self.board_descriptor.board_canvas()
        image_height, image_width = board_image.shape[:2]

        # Extract area image
        x1 = int(float(image_width) * self.board_area_pct[0])
        y1 = int(float(image_height) * self.board_area_pct[1])
        x2 = int(float(image_width) * self.board_area_pct[2])
        y2 = int(float(image_height) * self.board_area_pct[3])

        self.extracted_area_image = board_image[y1:y2, x1:x2]

        return self.extracted_area_image

    def grayscaled_area_image(self, reuse=False):
        """
        Extracts grayscaled area image from board snapshot.

        :param reuse: If True, reuse current snapshot, or else force extract new.
        :return Extracted area image
        """

        # Already extracted image
        if reuse and self.extracted_grayscaled_area_image is not None:
            return self.extracted_grayscaled_area_image

        # Extract image
        image = self.area_image(reuse)

        # Grayscale image
        self.extracted_grayscaled_area_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

        return self.extracted_grayscaled_area_image
